@{
    string app = ClientSideConfiguration.AngularApplicationName;
    string controller = ClientSideConfiguration.AngularUserManagerController;
    string controller_name = ClientSideConfiguration.AngularUserManagerControllerName;

    string ut_factory = ClientSideConfiguration.AngularUserTableSettingsFactory;


    string user_profile_modal = ClientSideConfiguration.UserProfileModalName;
    string confirmation_modal = ClientSideConfiguration.ConfirmationModalName;
    string user_creating_modal = ClientSideConfiguration.UserCreatingModalName;
}

<script type="text/javascript">
    angular.module('@app').controller('@controller', ['$scope', '@ut_factory', '$tools', '$users', '$roles', '$validation',
    function ($scope, @ut_factory, $tools, $users, $roles, $validation) {
        var self = this;

        self.UISetting = function() {
            $scope.TableManagment.Columns(@(ut_factory).Columns());

            $scope.TableManagment.Editable(@(ut_factory).Editable());
            $scope.TableManagment.Paginable(@(ut_factory).Paginable());
            $scope.TableManagment.Filterable(@(ut_factory).Filterable());

            $scope.TableManagment.PageSize(@(ut_factory).PageSize());

            var actions = @(ut_factory).Actions();

            @(ut_factory).SetActionClickById(actions, '@ClientSideConfiguration.ViewActionId', self.ShowUserProfileModal);
            @(ut_factory).SetActionClickById(actions, '@ClientSideConfiguration.DeleteActionId', self.ShowUserDeletingConfirmationModal);

            $scope.TableManagment.SetActions(actions)
            $scope.TableManagment.SetTableManagmentPanelCode(@(ut_factory).BottomManagmentPanel());
        }

        self.Initialize = function () {
            self.CurrentUser = {};
            self.DropdownData = {}

            self.ModelState = {};
            self.ModelStateFlag = {
                Flag: true
            };

            self.Notifications = [];

            self.UISetting();
            self.FetchingData();
        };


        /*------------Modal methods------------*/

        self.ShowUserProfileModal = function (row) {
            self.ClearValidationData();

            self.CurrentUser = $tools.Copy(row);
            $tools.ShowModal('@user_profile_modal');
        }

        self.HideUserProfileModal = function () {
            $tools.HideModal('@user_profile_modal');
        }

        self.ShowUserDeletingConfirmationModal = function (row) {
            $tools.ShowModal('@confirmation_modal');
        }

        self.HideUserDeletingConfirmationModal = function (row) {
            $tools.ShowModal('@confirmation_modal');
        }

        self.ShowUserCreationModal = function () {
            self.ClearValidationData();

            self.CurrentUser = {};
            $tools.ShowModal('@user_creating_modal');
        }

        self.HideUserCreationModal = function () {
            $tools.HideModal('@user_creating_modal');
        }

        /*------------End modal methods------------*/

        /*------------Data access methods------------*/

        self.FetchingData = function() {
            $roles.GetRoles(function(roles) {
                self.DropdownData.Roles = roles;
                self.GetUsers();
            });
        }

        self.GetUsers = function() {
            $users.GetUsers(function (users) {
                var data = [];
                angular.forEach(users, function (user) {
                    data.push({ Data: user });
                });

                $scope.TableManagment.LoadData(data);
            })
        }

        self.UpdateUserData = function() {
            if (self.ValidateUserProfileData(self.CurrentUser)) {
                $users.UpdateUserData(self.CurrentUser, function (result) {
                    self.FetchingData();
                    self.HideUserProfileModal();
                },
                function(error, status) {
                    $validation.ServerValidationErrorsParse(error.ModelState);
                    $validation.ServerValidationNotificationsParse(error.ModelState, self.Notifications);
                });
            }
        }

        self.Register = function() {
            if (self.ValidateRegisterUserProfileData(self.CurrentUser)) {
                $users.Register(self.CurrentUser, function (result) {
                    self.FetchingData();
                    self.HideUserCreationModal();
                },
                function(error, status) {
                    $validation.ServerValidationErrorsParse(error.ModelState);
                    $validation.ServerValidationNotificationsParse(error.ModelState, self.Notifications);
                });
            }
        }

        

        /*------------End data access methods------------*/

        /*------------Validation methods------------*/

        self.ValidateUserProfileData = function (model) {
            self.ClearValidationData();

            self.ModelState.Email = $validation.ValidateField(model.Email, self.ModelStateFlag);
            self.ModelState.UserName = $validation.ValidateField(model.UserName, self.ModelStateFlag);

            self.ModelState.Profile = {};
            self.ModelState.Profile.Name = $validation.ValidateField(model.Profile.Name, self.ModelStateFlag);

            return self.ModelStateFlag.Flag
        }

        self.ValidateRegisterUserProfileData = function (model) {
            self.ClearValidationData();

            self.ModelState.Email = $validation.ValidateField(model.Email, self.ModelStateFlag);
            self.ModelState.UserName = $validation.ValidateField(model.UserName, self.ModelStateFlag);

            self.ModelState.Initials = $validation.ValidateField(model.Initials, self.ModelStateFlag);
            self.ModelState.PhoneNumber = $validation.ValidateField(model.PhoneNumber, self.ModelStateFlag);

            self.ModelState.Password = $validation.ValidateField(model.Password, self.ModelStateFlag);
            self.ModelState.ConfirmPassword = $validation.ValidateField(model.ConfirmPassword, self.ModelStateFlag);

            return self.ModelStateFlag.Flag;
        }

        self.ClearValidationData = function() {
            self.ModelState = {};
            self.ModelStateFlag.Flag = true;

            self.Notifications = [];
        }

        /*------------End validation methods------------*/


        self.Initialize()
}])
</script>
