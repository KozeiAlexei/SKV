@{
    string app = ClientSideConfiguration.AngularApplicationName;
    string controller = ClientSideConfiguration.AngularUserManagerController;
    string controller_name = ClientSideConfiguration.AngularUserManagerControllerName;

    string ut_factory = ClientSideConfiguration.AngularUserTableSettingsFactory;
}

<script type="text/javascript">
    angular.module('@app').controller('@controller', ['$scope', '@ut_factory', 'ToolsService', '$users', '$roles',
    function ($scope, @ut_factory, ToolsService, $users, $roles) {
        var self = this;

        self.FetchingData = function() {
            $roles.GetRoles(function(roles) {
                self.DropdownData.Roles = roles;
            });

            self.GetUsers();
        }

        self.UISetting = function() {
            $scope.TableManagment.Columns(@(ut_factory).Columns());

            $scope.TableManagment.Editable(@(ut_factory).Editable());
            $scope.TableManagment.Paginable(@(ut_factory).Paginable());
            $scope.TableManagment.Filterable(@(ut_factory).Filterable());

            $scope.TableManagment.PageSize(@(ut_factory).PageSize());

            var actions = @(ut_factory).Actions();

            @(ut_factory).SetActionClickById(actions, '@ClientSideConfiguration.ViewActionId', self.OpenUserModal);
            @(ut_factory).SetActionClickById(actions, '@ClientSideConfiguration.DeleteActionId', self.DeleteUser);

            $scope.TableManagment.SetActions(actions)

            $scope.TableManagment.EnableManagmentPanel(true);
            $scope.TableManagment.SetTableManagmentPanelCode('<div><button class="btn btn-success btn-flat" ng-click="@(controller_name).CreateUser()"><span class="glyphicon glyphicon-plus"></button></div>');

        }


        self.Initialize = function () {
            self.CurrentUser = {};
            self.DropdownData = {}

            self.ModelState = {};
            self.ModelStateFlag = true;

            self.UISetting();
            self.FetchingData();
        };

        self.SaveChangesFunc = function () { return true; }

        self.OpenUserModal = function (row) {
            self.CurrentUser = ToolsService.Copy(row);
            ToolsService.ShowModal('UserProfileModal');
        }

        self.CloseUserProfileModal = function () {
            ToolsService.HideModal('UserProfileModal');
        }

        self.GetUsers = function () {
            $users.GetUsers(function (users) {
                var data = [];
                angular.forEach(users, function (user) {
                    data.push({ Data: user });
                });

                $scope.TableManagment.LoadData(data);
            })
        }

        self.LoadUserData = function (row) {
            self.CurrentUserData = {};
            if (row.Id != undefined || row.Id != null) {
                RequestService.Post(self.Requests.LoadUserData, { Id: row.Id }, function (response) {
                    self.CurrentUserData = response.ResponseData;
                });
            }
        }

        self.RenderContent = function (row) {
            return '<div ng-include = "\'' + self.UserDataTemplatePath + '\'"></div>'
        }

        self.AddRole = function (role) {
            var arr = []; var flag = true;
            angular.forEach(self.CurrentUserData.Roles, function (item) {
                if (item == role.Name)
                    flag = false;
                else
                    arr.push(item);
            });

            if (flag) arr.push(role.Name);
            self.CurrentUserData.Roles = arr;
        }

        self.IsExistsRole = function (role) {
            var result = false;
            angular.forEach(self.CurrentUserData.Roles, function (item) {
                if (item == role.Name)
                    result = true;
            });

            return result;
        }

        self.UpdateUserData = function () {
            if (self.ValidateUserProfileData(self.CurrentUser)) {
                $users.UpdateUserData(self.CurrentRow, function (result) {

                });
            }
        }

        self.CreateUser = function () {
            ToolsService.ShowModal('UserCreatingModal');
        }

        self.DeleteUser = function (row) {
            RequestService.Post(self.Requests.DeleteUser, { Id: row.Id }, function (response) {
                self.LoadUserList();
            });
        }

        self.ValidateUserProfileData = function (model) {
            self.ModelStateFlag = true;

            self.ModelState.UserName = self.ValidateField(model.UserName);
            self.ModelState.Email = self.ValidateField(model.Email);
            self.ModelState.Profile = {};
            self.ModelState.Profile.Name = self.ValidateField(model.Profile.Name);

            return self.ModelStateFlag;
        }


        self.ValidateField = function (field_value, custom_validation_func) {
            var result = true & !ToolsService.IsNullOrEmpty(field_value);
            if (custom_validation_func != undefined)
                result &= custom_validation_func(field_value);

            self.ModelStateFlag &= result;
            if (!result)
                return 'border-color : #ff0000';

            return 'border-color : #00ff00';
        }


        self.Initialize()
}])
</script>
