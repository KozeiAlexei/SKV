@using SKV.PL.ClientSide.Concrete;
@using SKV.PL.ClientSide.Abstract.Components

@using SKV.PL.ClientSide.Components
@using SKV.PL.ClientSide.Components.Widget
@using SKV.PL.ClientSide.Components.DynamicTable

@section Scripts {
    @Linker.GetDirective("Widget")
    @Linker.GetDirective("CompileHtml")
    @Linker.GetDirective("DynamicTable")

    @Linker.DynamicTableModule()

    @Linker.GetService("Tools")
    @Linker.GetService("Request")
    @Linker.GetService("Location")

    @Linker.GetServiceExt("$request")

    @Linker.GetServiceExt("api/$users")
    @Linker.GetServiceExt("api/$roles")
}

@(ComponentFactory.Create<WidgetMvc>()
        .Id("UserManagerWidget")
        .Title(NameManager.GetName("UserManager"))
        .Body(body =>
        {
            body.Create<DynamicTableMvc>()
                .AngularTableSettingsFactoryName(CRMConfiguration.AngularUserTableSettingsFactory)
                .AngularDynamicTableActionsController(CRMConfiguration.AngularUserManagerController)
                .AngularDynamicTableActionsControllerName(CRMConfiguration.AngularUserManagerControllerName)
                .Columns(columns =>
                {
                    columns.Create<DynamicTableColumnMvc>().Name("UserName").Title(Resources.Resource.UserName).Width(20)
                                    .Type(TableColumnDataType.Text).Editable(true).Filterable(true);

                    columns.Create<DynamicTableColumnMvc>().Name("Email").Title(Resources.Resource.Email).Width(20)
                                    .Type(TableColumnDataType.Text).Editable(true).Filterable(true);

                    columns.Create<DynamicTableColumnMvc>().Name("PhoneNumber").Title(Resources.Resource.PhoneNumber).Width(20)
                                    .Type(TableColumnDataType.Text).Editable(true).Filterable(true);

                    columns.Create<DynamicTableColumnMvc>().Name("Profile.Name").Title(Resources.Resource.UserInitials).Width(20)
                                    .Type(TableColumnDataType.Text).Editable(true).Filterable(true);

                    columns.Create<DynamicTableColumnMvc>().Name("Actions").Title(Resources.Resource.Actions).Width(20)
                                    .Type(TableColumnDataType.Actions).Editable(true).Filterable(false);
                })
                .Body(b =>
                {
                    b.Create<ContentMvc>().FromPartitalView(Html.Partial("UserProfileModal"));
                    b.Create<ContentMvc>().FromPartitalView(Html.Partial("UserCreatingModal"));
                })
                .Logic(logic => logic.Create<ContentMvc>().FromPartitalView(Html.Partial("UserManagerController")))
                .Editable(false)
                .Filterable(false)
                .Paginable(true)
                .RowActions(actions =>
                {
                    actions.Create<DynamicTableActionMvc>()
                           .Icon("glyphicon glyphicon-folder-open")
                           .Title(string.Empty).Class("btn btn-flat btn-success  btn-md")
                           .Click(FunctionType.Referrence, @"self.OpenUserModal")
                           .Visible(FunctionType.Custom, @"function (row) { return true; }");

                    actions.Create<DynamicTableActionMvc>()
                           .Icon("glyphicon glyphicon-remove")
                           .Title(string.Empty).Class("btn btn-flat btn-danger  btn-md action-button-layout")
                           .Click(FunctionType.Referrence, @"self.DeleteUser")
                           .Visible(FunctionType.Custom, @"function (row) { return (row.Id != null) && (row.Id != undefined); }");
                });
        })
        .Render()
)



