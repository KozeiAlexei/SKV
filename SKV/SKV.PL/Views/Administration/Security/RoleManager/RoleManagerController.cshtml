@using Config = SKV.Configuration;

@using SKV.PL.ClientSide.Concrete;

@{
    string app = Config.AngularMain.ApplicationName;
    string controller = Config.AngularControllerNames.RoleManagerController;
    string controller_name = Config.AngularControllerAs.RoleManagerControllerAs;

    string ts_factory = Config.AngularFactoryNames.RoleTableSettingsFactory;

    string profile_modal = NamesGenerator.GetModalId(Config.UIObjectNames.RoleProfile);
    string creating_modal = Config.AngularModalNames.RoleCreatingModalName;
}

<script type="text/javascript">
    angular.module('@app').controller('@controller', ['$scope', '@ts_factory', '$tools', '$roles', '$validation', '$permissions', '$pages',
    function ($scope, @ts_factory, $tools, $roles, $validation, $permissions, $pages) {
        var self = this;

        self.UISetting = function() {
            $scope.TableManagment.Columns(@(ts_factory).Columns());

            $scope.TableManagment.Editable(@(ts_factory).Editable());
            $scope.TableManagment.Paginable(@(ts_factory).Paginable());
            $scope.TableManagment.Filterable(@(ts_factory).Filterable());

            $scope.TableManagment.PageSize(@(ts_factory).PageSize());

            var actions = @(ts_factory).Actions();

            @(ts_factory).SetActionClickById(actions, '@Config.AngularTableActionIds.ViewActionId', self.ShowRoleProfileModal);
            @(ts_factory).SetActionClickById(actions, '@Config.AngularTableActionIds.DeleteActionId', self.DeleteRole);

            $scope.TableManagment.SetActions(actions)
            $scope.TableManagment.SetTableManagmentPanelCode(@(ts_factory).BottomManagmentPanel());
        }

        self.Initialize = function () {
            self.DropdownData = {}
            self.CurrentRole = {};

            self.ModelState = {};
            self.ModelStateFlag = {
                Flag: true
            };

            self.Notifications = [];

            self.UISetting();
            self.FetchingData();
        };


        /*------------Modal methods------------*/

        self.ShowRoleProfileModal = function (row) {
            self.ClearValidationData();

            self.CurrentRole = $tools.Copy(row);
            $tools.ShowModal('@profile_modal');
        }

        self.HideRoleProfileModal = function () {
            $tools.HideModal('@profile_modal');
        }

        self.ShowRoleDeletingConfirmationModal = function (row) {
            self.CurrentRole = row;
            self.DeleteRole();
        }

        self.ShowRoleCreationModal = function () {
            self.ClearValidationData();

            self.CurrentRole = {};
            $tools.ShowModal('@creating_modal');
        }

        self.HideUserCreationModal = function () {
            $tools.HideModal('@creating_modal');
        }

        /*------------End modal methods------------*/

        /*------------Data access methods------------*/

        self.FetchingData = function() {
            $roles.GetRoles(function(roles) {
                var data = [];
                angular.forEach(roles, function (role) {
                    data.push({ Data: role });
                });

                $scope.TableManagment.LoadData(data);

                $permissions.GetPermissions(function(permissions) {
                    self.DropdownData.Permissions = permissions;

                    $pages.GetPages(function(pages) {
                        self.DropdownData.Pages = pages;
                    })
                })
            });
        }

        self.UpdateRoleData = function() {
            if (self.ValidateRoleProfileData(self.CurrentRole)) {
                $users.UpdateRoleData(self.CurrentRole, function (result) {
                    self.FetchingData();
                    self.HideRoleProfileModal();
                },
                function(error, status) {
                    $validation.ServerValidationErrorsParse(error.ModelState, self.ModelState);
                    $validation.ServerValidationNotificationsParse(error.ModelState, self.Notifications);
                });
            }
        }

        self.Create = function() {
            if (self.ValidateCreatingRoleProfileData(self.CurrentRole)) {
                $roles.Create(self.CurrentRole, function (result) {
                    self.FetchingData();
                    self.HideRoleCreationModal();
                },
                function(error, status) {
                    $validation.ServerValidationErrorsParse(error.ModelState, self.ModelState);
                    $validation.ServerValidationNotificationsParse(error.ModelState, self.Notifications);
                });
            }
        }

        self.DeleteRole = function(row) {
            $roles.DeleteRole(row, function(result) {
                self.FetchingData();
            }, function(error, status) {});
        }



        /*------------End data access methods------------*/

        /*------------Validation methods------------*/

        self.ValidateRoleProfileData = function (model) {
            self.ClearValidationData();

            self.ModelState.Email = $validation.ValidateField(model.Email, self.ModelStateFlag);
            self.ModelState.UserName = $validation.ValidateField(model.UserName, self.ModelStateFlag);

            self.ModelState.Profile = {};
            self.ModelState.Profile.Name = $validation.ValidateField(model.Profile.Name, self.ModelStateFlag);

            return self.ModelStateFlag.Flag
        }

        self.ValidateCreatingRoleProfileData = function (model) {
            self.ClearValidationData();

            self.ModelState.Email = $validation.ValidateField(model.Email, self.ModelStateFlag);
            self.ModelState.UserName = $validation.ValidateField(model.UserName, self.ModelStateFlag);

            self.ModelState.Initials = $validation.ValidateField(model.Initials, self.ModelStateFlag);
            self.ModelState.PhoneNumber = $validation.ValidateField(model.PhoneNumber, self.ModelStateFlag);

            self.ModelState.Password = $validation.ValidateField(model.Password, self.ModelStateFlag);
            self.ModelState.ConfirmPassword = $validation.ValidateField(model.ConfirmPassword, self.ModelStateFlag);

            return self.ModelStateFlag.Flag;
        }

        self.ClearValidationData = function() {
            self.ModelState = {};
            self.ModelStateFlag.Flag = true;

            self.Notifications = [];
        }

        /*------------End validation methods------------*/


        self.Initialize()
}])
</script>

